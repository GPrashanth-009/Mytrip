[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tripmate"
version = "0.1.0"
description = "AI-powered travel assistant for intelligent trip planning"
readme = "README.md"
license = {text = "GNU Affero General Public License v3"}
authors = [
    {name = "TripMate Development Team", email = "team@tripmate.ai"}
]
maintainers = [
    {name = "TripMate Development Team", email = "team@tripmate.ai"}
]
keywords = ["travel", "ai", "trip-planning", "chatbot", "fastapi", "react"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Travel",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "openai>=1.3.7",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "sqlalchemy>=2.0.23",
    "python-dotenv>=1.0.0",
    "redis>=5.0.1",
    "celery>=5.3.4",
    "httpx>=0.25.2",
    "python-multipart>=0.0.6",
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "black>=23.11.0",
    "isort>=5.12.0",
    "ruff>=0.1.6",
    "flake8>=6.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "ruff>=0.1.6",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocstrings[python]>=0.24.0",
]
test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",
]

[project.urls]
Homepage = "https://tripmate.ai"
Documentation = "https://docs.tripmate.ai"
Repository = "https://code.swecha.org/Prashanth009/group_project"
"Bug Tracker" = "https://code.swecha.org/Prashanth009/group_project/-/issues"
"Source Code" = "https://code.swecha.org/Prashanth009/group_project"
"Download" = "https://code.swecha.org/Prashanth009/group_project/-/releases"

[project.scripts]
tripmate = "tripmate.cli:main"

[project.gui-scripts]
tripmate-gui = "tripmate.gui:main"

[tool.setuptools.packages.find]
where = ["backend"]
include = ["*"]
exclude = ["tests*", "test*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["tripmate"]
known_third_party = ["fastapi", "uvicorn", "openai", "pydantic", "sqlalchemy"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["backend/tests", "tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "fastapi.*",
    "uvicorn.*",
    "celery.*",
    "redis.*",
]
ignore_missing_imports = true

[tool.pylint.messages_control]
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
    "R0915",  # too-many-statements
    "W0621",  # redefined-outer-name
    "W0622",  # redefined-builtin
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "db"]

[tool.pylint.design]
max-args = 10
max-attributes = 10
max-bool-expr = 5
max-branches = 15
max-locals = 20
max-parents = 7
max-public-methods = 30
max-returns = 10
max-statements = 60

[tool.bandit]
exclude_dirs = ["tests", "test", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.safety]
output = "json"
